import numpy as np
def gaussJordan(m, v):
    n = len(m)
    aug = np.hstack([m,v.reshape(-1,1)])
    for i in range(n):
        aug[i] = aug[i] / aug[i,i]
        for j in range(n):
            if i != j:
                aug[j] = aug[j] - aug[j,i] * aug[i]
            return aug[:, -1]

A = np.array([[2,1,-1],[-3,-1,2],[-2,1,2]],
    dtype = float)
B = np.array([8,-11,-3], dtype = float)
sol = gaussJordan(A, B)
print("Solucion:")
print(f' x = {sol[0]: 2f}, y = {sol[1] : 2f}, z = {sol[2] : 2f}')
